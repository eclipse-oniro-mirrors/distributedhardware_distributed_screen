# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import(
    "//foundation/distributedhardware/distributed_screen/distributedscreen.gni")

ohos_shared_library("distributed_screen_source") {
  include_dirs = [
    "//third_party/json/include",
    "//third_party/libjpeg-turbo",
    "${distributedhardwarefwk_path}/interfaces/inner_kits/include",
    "${av_transport_path}/interface",
    "${av_transport_path}/common/include",
    "${fwk_common_path}/utils/include",
  ]

  include_dirs += [
    "./dscreenservice/include",
    "./dscreenservice/include/callback",
    "${services_path}/screenservice/sourceservice/dscreenmgr",
    "${services_path}/screenservice/sourceservice/dscreenmgr/common/include",
    "${interfaces_path}/innerkits/native_cpp/screen_sink/include",
    "${interfaces_path}/innerkits/native_cpp/screen_sink/include/callback",
    "${interfaces_path}/innerkits/native_cpp/screen_source/include",
    "${interfaces_path}/innerkits/native_cpp/screen_source/include/callback",
    "${common_path}/include",
    "${services_path}/common/utils/include",
    "${services_path}/common/databuffer/include",
    "${services_path}/common/screen_channel/include",
    "${services_path}/screentransport/screensourceprocessor/include",
    "${services_path}/screentransport/screensourceprocessor/encoder/include",
    "${services_path}/screentransport/screensourcetrans/include",
    "${services_path}/common/imageJpeg/include",
    "${services_path}/common/decision_center/include",
  ]

  sources = [
    "${interfaces_path}/innerkits/native_cpp/screen_sink/src/dscreen_sink_proxy.cpp",
    "${interfaces_path}/innerkits/native_cpp/screen_source/src/dscreen_source_proxy.cpp",
    "${services_path}/common/utils/src/dscreen_fwkkit.cpp",
    "${services_path}/common/utils/src/dscreen_maprelation.cpp",
    "${services_path}/common/utils/src/video_param.cpp",
    "./dscreenmgr/1.0/src/dscreen.cpp",
    "./dscreenmgr/1.0/src/dscreen_manager.cpp",
    "./dscreenmgr/2.0/src/av_sender_engine_adapter.cpp",
    "./dscreenmgr/2.0/src/dscreen.cpp",
    "./dscreenmgr/2.0/src/dscreen_manager.cpp",
    "./dscreenmgr/common/src/screen_manager_adapter.cpp",
    "./dscreenservice/src/callback/dscreen_source_callback_proxy.cpp",
    "./dscreenservice/src/dscreen_source_service.cpp",
    "./dscreenservice/src/dscreen_source_stub.cpp",
  ]

  deps = [
    "${av_transport_path}/av_trans_engine/av_sender:distributed_av_sender",
    "${common_path}:distributed_screen_utils",
    "${graphicstandard_path}/frameworks/surface:surface",
    "${services_path}/screentransport/screensourcetrans:distributed_screen_sourcetrans",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"dscreensource\"",
    "LOG_DOMAIN=0xD004100",
  ]

  external_deps = [
    "c_utils:utils",
    "distributed_hardware_fwk:libdhfwk_sdk",
    "graphic_standard:libcomposer",
    "graphic_standard:surface",
    "hisysevent_native:libhisysevent",
    "ipc:ipc_core",
    "multimedia_image_framework:image_native",
    "player_framework:media_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_screen"
}
