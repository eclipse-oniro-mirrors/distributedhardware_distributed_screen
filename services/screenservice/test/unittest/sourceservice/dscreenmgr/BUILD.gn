# Copyright (c) 2022-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import(
    "//foundation/distributedhardware/distributed_screen/distributedscreen.gni")

module_out_path = "distributed_screen/DscreenMgrTest"

config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "./include",
    "${common_path}/include",
    "${distributedscreen_path}/interfaces/innerkits/native_cpp/screen_sink/include",
    "${distributedscreen_path}/interfaces/innerkits/native_cpp/screen_sink/include/callback",
    "${distributedscreen_path}/interfaces/innerkits/native_cpp/screen_source/include",
    "${distributedscreen_path}/interfaces/innerkits/native_cpp/screen_source/include/callback",
    "${services_path}/common/databuffer/include",
    "${services_path}/common/decision_center/include",
    "${services_path}/common/imageJpeg/include",
    "${services_path}/common/screen_channel/include",
    "${services_path}/common/utils/include",
    "${services_path}/screenservice/sourceservice/dscreenmgr/",
    "${services_path}/screentransport/screensourceprocessor/encoder/include",
    "${services_path}/screentransport/screensourceprocessor/include",
    "${services_path}/screentransport/screensourcetrans/include",
    "${services_path}/screenservice/sinkservice/screenregionmgr",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr",
    "${services_path}/screenservice/test/unittest/sinkservice/screenregionmgr/engineutils/include",
  ]
}

## UnitTest DscreenMgrTest
ohos_unittest("DscreenMgrTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  module_out_path = module_out_path

  sources = [
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/1.0/src/dscreen_manager_test.cpp",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/1.0/src/dscreen_test.cpp",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/1.0/src/screen_manager_adapter_test.cpp",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/2.0/src/av_sender_engine_adapter_test.cpp",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/2.0/src/dscreen_manager_test.cpp",
    "${services_path}/screenservice/test/unittest/sourceservice/dscreenmgr/2.0/src/dscreen_test.cpp",
  ]

  configs = [
    ":module_private_config",
    "${common_path}/test/unittest/resource:dscreen_unittest_public_config",
  ]

  deps = [
    "${distributedscreen_path}/common:distributed_screen_utils",
    "${services_path}/screenservice/sourceservice:distributed_screen_source",
    "${services_path}/screentransport/screensourcetrans:distributed_screen_sourcetrans",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "av_codec:av_codec_client",
    "cJSON:cjson",
    "c_utils:utils",
    "distributed_hardware_fwk:distributed_av_sender",
    "distributed_hardware_fwk:distributedhardwareutils",
    "distributed_hardware_fwk:libdhfwk_sdk",
    "dsoftbus:softbus_client",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "graphic_surface:sync_fence",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "media_foundation:media_foundation",
    "window_manager:libdm",
  ]
}
